[{"/home/maham/Documents/Algo_Project/algo_project/src/App.js":"1","/home/maham/Documents/Algo_Project/algo_project/src/VerticalTabs.js":"2","/home/maham/Documents/Algo_Project/algo_project/src/Table.js":"3","/home/maham/Documents/Algo_Project/algo_project/src/algorithms/lcs.js":"4","/home/maham/Documents/Algo_Project/algo_project/src/algorithms/scs.js":"5","/home/maham/Documents/Algo_Project/algo_project/src/algorithms/lis.js":"6","/home/maham/Documents/Algo_Project/algo_project/src/algorithms/lvd.js":"7","/home/maham/Documents/Algo_Project/algo_project/src/index.js":"8","/home/maham/Documents/Algo_Project/algo_project/src/algorithms/mcm.js":"9","/home/maham/Documents/Algo_Project/algo_project/src/algorithms/ks01.js":"10","/home/maham/Documents/Algo_Project/algo_project/src/algorithms/partition.js":"11","/home/maham/Documents/Algo_Project/algo_project/src/algorithms/rc.js":"12"},{"size":2117,"mtime":1610055731576,"results":"13","hashOfConfig":"14"},{"size":9426,"mtime":1610069419437,"results":"15","hashOfConfig":"14"},{"size":1900,"mtime":1609259917235,"results":"16","hashOfConfig":"14"},{"size":1817,"mtime":1610055602616,"results":"17","hashOfConfig":"14"},{"size":3662,"mtime":1610056198970,"results":"18","hashOfConfig":"14"},{"size":930,"mtime":1610056349215,"results":"19","hashOfConfig":"14"},{"size":1107,"mtime":1610057713257,"results":"20","hashOfConfig":"14"},{"size":529,"mtime":1609256988110,"results":"21","hashOfConfig":"14"},{"size":859,"mtime":1610059093168,"results":"22","hashOfConfig":"14"},{"size":1659,"mtime":1610062259836,"results":"23","hashOfConfig":"14"},{"size":1617,"mtime":1610064476071,"results":"24","hashOfConfig":"14"},{"size":650,"mtime":1610069356786,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"182wfql",{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/maham/Documents/Algo_Project/algo_project/src/App.js",["55"],"import React, { useState } from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport VerticalTabs from './VerticalTabs';\nimport Table from './Table';\nimport PlayCircleFilledWhiteIcon from '@material-ui/icons/PlayCircleFilledWhite';\n\nfunction App() {\n  let [logs, setLogs] = useState([]);\n  let [onRun, setOnRun] = useState({\"fn\": () => alert(\"a\")});\n  let [output, setOutput] = useState();\n\n  function flushLogs() {\n    setLogs([]);\n    setOutput();\n  }\n\n  function updateLogs(item) {\n    setLogs(logs => [...logs, item]);\n  }\n\n  function updateRun(fn) {\n    setOnRun({fn});\n  }\n\n  function handleRun() {\n    onRun[\"fn\"]();\n  }\n\n  function updateOutput(output) {\n    setOutput(output);\n  }\n\n  return (\n    <div style={{height: \"100%\"}}>\n      <Grid container style={{height: \"100%\"}}>\n        <Grid item xs={8} style={{textAlign: \"center\", padding: 20}}>\n          <Typography variant=\"h2\">Algorithms Project</Typography>\n          <Button variant=\"contained\" color=\"secondary\" style={{float: \"right\"}} size=\"large\" startIcon={<PlayCircleFilledWhiteIcon />} onClick={handleRun}>\n            Run\n          </Button>\n          <div style={{clear: \"both\"}}></div>\n          <br/><Divider /><br/>\n          <VerticalTabs updateLogs={updateLogs} flushLogs={flushLogs} updateRun={updateRun} updateOutput={updateOutput} />\n          <br/><Divider /><br/>\n          <div style={{textAlign: \"left\"}}>\n            <Typography variant=\"h5\">Final Output:</Typography>\n            <Typography>{output}</Typography>\n          </div>\n        </Grid>\n        <Grid item xs={4} zeroMinWidth style={{padding: 20, backgroundColor: \"#333\", color: \"#fff\", whiteSpace: \"nowrap\", overflowX: \"scroll\", maxWidth: \"100\", maxHeight: \"100%\"}}>\n          <Typography variant=\"h5\">Logs..</Typography>\n          {logs.map(log => <Typography style={{fontFamily: \"Source Code Pro\"}}>{log}</Typography>)}\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n",["56","57"],"/home/maham/Documents/Algo_Project/algo_project/src/VerticalTabs.js",["58"],"/home/maham/Documents/Algo_Project/algo_project/src/Table.js",[],["59","60"],"/home/maham/Documents/Algo_Project/algo_project/src/algorithms/lcs.js",["61","62"],"/home/maham/Documents/Algo_Project/algo_project/src/algorithms/scs.js",["63","64"],"function longestCommonSubsequence(s1, s2) {\n  // string to array\n  const arr1 = [...s1]\n  const arr2 = [...s2]\n\n  // define n x m sized array filled with 0's\n  let matrix = [];\n\n  for(let i = 0; i <= arr1.length; i++) {\n      matrix[i] = [];\n      for(let j = 0; j <= arr2.length; j++) {\n          matrix[i][j] = 0;\n      }\n  }\n\n  // fill the matrix\n  for(let i = 1; i <= arr1.length; i++) {\n      for(let j = 1; j <= arr2.length; j++) {\n          if(arr1[i-1] === arr2[j-1]) { \n              matrix[i][j] = matrix[i-1][j-1] + 1;\n          }\n          else matrix[i][j] = Math.max(matrix[i-1][j], matrix[i][j-1])\n      }\n  }\n  let index = matrix[matrix.length-1][matrix[0].length-1];\n  console.log(index);\n  let lcs = [];\n  let a = arr1.length;\n  let b = arr2.length; \n  let longestLen = index;\n  while (a > 0 && b > 0){ \n      // If current character in X[] and Y are same, then \n      // current character is part of LCS \n      if (arr1[a-1] == arr2[b-1]) \n      { \n          lcs[index-1] = arr1[a-1]; // Put current character in result \n          a--; b--;     // reduce values of i, j and index \n\n          index--;\n      } \n\n      // If not same, then find the larger of two and \n      // go in the direction of larger value \n      else if (matrix[a-1][b] > matrix[a][b-1]) {\n          //lcs[index-1] = arr1[a-1];\n          a--;\n      } else {\n          //lcs[index-1] = arr2[b-1];\n          b--; \n      }\n      let currStr = lcs.join(\"\");\n      if(currStr.length == longestLen) break;\n  }\n  \n  let answer = lcs.join(\"\");\n  return answer;\n}\n\nexport default function shortestCommonSupersequence(set1, set2, updateLogs, updateOutput) {\n  // Let's first find the longest common subsequence of two sets.\n  const lcs = longestCommonSubsequence(set1, set2);\n  console.log(lcs);\n\n  // If LCS is empty then the shortest common supersequence would be just\n  // concatenation of two sequences.\n  if (lcs.length === 1 && lcs[0] === '') {\n    return set1.concat(set2);\n  }\n\n  // Now let's add elements of set1 and set2 in order before/inside/after the LCS.\n  let supersequence = [];\n\n  let setIndex1 = 0;\n  let setIndex2 = 0;\n  let lcsIndex = 0;\n  let setOnHold1 = false;\n  let setOnHold2 = false;\n\n  while (lcsIndex < lcs.length) {\n    console.log('abcd');\n    // Add elements of the first set to supersequence in correct order.\n    if (setIndex1 < set1.length) {\n      if (!setOnHold1 && set1[setIndex1] !== lcs[lcsIndex]) {\n        supersequence.push(set1[setIndex1]);\n        updateLogs(supersequence.join(\"\"));\n        setIndex1 += 1;\n      } else {\n        setOnHold1 = true;\n      }\n    }\n\n    // Add elements of the second set to supersequence in correct order.\n    if (setIndex2 < set2.length) {\n      if (!setOnHold2 && set2[setIndex2] !== lcs[lcsIndex]) {\n        supersequence.push(set2[setIndex2]);\n        updateLogs(supersequence.join(\"\"));\n        setIndex2 += 1;\n      } else {\n        setOnHold2 = true;\n      }\n    }\n\n    // Add LCS element to the supersequence in correct order.\n    if (setOnHold1 && setOnHold2) {\n      supersequence.push(lcs[lcsIndex]);\n      updateLogs(supersequence.join(\"\"));\n      lcsIndex += 1;\n      setIndex1 += 1;\n      setIndex2 += 1;\n      setOnHold1 = false;\n      setOnHold2 = false;\n    }\n  }\n\n  // Attach set1 leftovers.\n  if (setIndex1 < set1.length) {\n    supersequence = supersequence.concat(set1.slice(setIndex1));\n    updateLogs(supersequence.join(\"\"));\n  }\n\n  // Attach set2 leftovers.\n  if (setIndex2 < set2.length) {\n    supersequence = supersequence.concat(set2.slice(setIndex2));\n    updateLogs(supersequence.join(\"\"));\n  }\n  let answer = supersequence.join(\"\");\n  updateOutput(answer);\n  return answer;\n}\n","/home/maham/Documents/Algo_Project/algo_project/src/algorithms/lis.js",["65"],"export default function longestIncreasingSubsequence(input, updateLogs, updateOutput) {\n    if (input.length === 0) {\n      return [];\n    }\n   \n    var lisLenPerIndex = [];\n    let max = { index: 0, length: 1 };\n   \n    for (var i = 0; i < input.length; i++) {\n      lisLenPerIndex[i] = 1;\n      for (var j = i - 1; j >= 0; j--) {\n        if (input[i] > input[j] && lisLenPerIndex[j] >= lisLenPerIndex[i]) {\n          var length = lisLenPerIndex[i] = lisLenPerIndex[j] + 1;\n          if (length > max.length) {\n            max = { index: i, length };\n          }\n        }\n      }\n    }\n   \n    var lis = [input[max.index]];\n    for (var i = max.index; i >= 0 && max.length !== 0; i--) {\n      if (input[max.index] > input[i] && lisLenPerIndex[i] === max.length - 1) {\n        lis.unshift(input[i]);\n        updateLogs(lis.join(\",\"));\n        max.length--;\n      }\n    }\n\n    updateOutput(lis.join(\", \"));\n   \n    return lis;\n  }","/home/maham/Documents/Algo_Project/algo_project/src/algorithms/lvd.js",["66","67","68"],"/home/maham/Documents/Algo_Project/algo_project/src/index.js",[],"/home/maham/Documents/Algo_Project/algo_project/src/algorithms/mcm.js",["69","70"],"/home/maham/Documents/Algo_Project/algo_project/src/algorithms/ks01.js",["71","72"],"/home/maham/Documents/Algo_Project/algo_project/src/algorithms/partition.js",["73","74"],"/home/maham/Documents/Algo_Project/algo_project/src/algorithms/rc.js",[],{"ruleId":"75","severity":1,"message":"76","line":8,"column":8,"nodeType":"77","messageId":"78","endLine":8,"endColumn":13},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":73,"column":15,"nodeType":"85","messageId":"86","endLine":78,"endColumn":8},{"ruleId":"79","replacedBy":"87"},{"ruleId":"81","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":37,"column":23,"nodeType":"91","messageId":"92","endLine":37,"endColumn":25},{"ruleId":"89","severity":1,"message":"90","line":56,"column":27,"nodeType":"91","messageId":"92","endLine":56,"endColumn":29},{"ruleId":"89","severity":1,"message":"90","line":34,"column":21,"nodeType":"91","messageId":"92","endLine":34,"endColumn":23},{"ruleId":"89","severity":1,"message":"90","line":52,"column":25,"nodeType":"91","messageId":"92","endLine":52,"endColumn":27},{"ruleId":"93","severity":1,"message":"94","line":22,"column":14,"nodeType":"77","messageId":"95","endLine":22,"endColumn":15},{"ruleId":"89","severity":1,"message":"90","line":2,"column":17,"nodeType":"91","messageId":"92","endLine":2,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":3,"column":17,"nodeType":"91","messageId":"92","endLine":3,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":23,"column":30,"nodeType":"91","messageId":"92","endLine":23,"endColumn":32},{"ruleId":"93","severity":1,"message":"94","line":9,"column":14,"nodeType":"77","messageId":"95","endLine":9,"endColumn":15},{"ruleId":"93","severity":1,"message":"94","line":14,"column":18,"nodeType":"77","messageId":"95","endLine":14,"endColumn":19},{"ruleId":"75","severity":1,"message":"96","line":3,"column":9,"nodeType":"77","messageId":"78","endLine":3,"endColumn":20},{"ruleId":"89","severity":1,"message":"90","line":39,"column":17,"nodeType":"91","messageId":"92","endLine":39,"endColumn":19},{"ruleId":"89","severity":1,"message":"97","line":10,"column":17,"nodeType":"91","messageId":"92","endLine":10,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":28,"column":25,"nodeType":"91","messageId":"92","endLine":28,"endColumn":27},"no-unused-vars","'Table' is defined but never used.","Identifier","unusedVar","no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'files', 'files', 'files', 'files'.","ArrowFunctionExpression","unsafeRefs",["98"],["99"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'i' is already defined.","redeclared","'finalResult' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]