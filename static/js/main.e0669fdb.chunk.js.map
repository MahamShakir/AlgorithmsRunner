{"version":3,"sources":["algorithms/scs.js","VerticalTabs.js","algorithms/lcs.js","algorithms/lis.js","algorithms/lvd.js","algorithms/mcm.js","algorithms/ks01.js","algorithms/partition.js","algorithms/rc.js","algorithms/coin.js","algorithms/wb.js","Table.js","App.js","reportWebVitals.js","index.js"],"names":["shortestCommonSupersequence","set1","set2","updateLogs","updateOutput","lcs","s1","s2","arr1","arr2","matrix","i","length","j","Math","max","index","console","log","a","b","longestLen","join","longestCommonSubsequence","concat","supersequence","setIndex1","setIndex2","lcsIndex","setOnHold1","setOnHold2","push","slice","answer","TabPanel","props","children","value","other","role","hidden","id","aria-labelledby","Box","p","Typography","a11yProps","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","display","tabs","borderRight","divider","VerticalTabs","flushLogs","updateRun","classes","React","useState","setValue","files","setFiles","className","Tabs","orientation","variant","onChange","event","newValue","algo","fetch","then","res","json","data","catch","err","updateFiles","aria-label","Tab","label","style","flex","List","component","Object","keys","map","file","ListItem","button","onClick","str1","str2","currStr","ListItemText","primary","scs","arr","input","lisLenPerIndex","lis","unshift","tmp","row","prev","val","charAt","min","d","lvd","dims","n","c","len","Number","MAX_SAFE_INTEGER","k","cost","mcm","w","v","W","weights","values","DP","dontPutInKnapsack","putInSack","sum","ks01","num","dp","Array","fill","s","partition","l","L","maximum_revenue","r","_n","rc","coins","money","S","x","y","m","table","coin","wordDict","indexOf","substring","Boolean","wb","minWidth","createData","name","calories","fat","carbs","protein","App","logs","setLogs","alert","onRun","setOnRun","output","setOutput","height","Grid","container","item","xs","textAlign","padding","Button","color","float","size","startIcon","clear","Divider","fn","zeroMinWidth","whiteSpace","overflowX","maxWidth","maxHeight","fontFamily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0669fdb.chunk.js","sourcesContent":["function longestCommonSubsequence(s1, s2) {\n  // string to array\n  const arr1 = [...s1]\n  const arr2 = [...s2]\n\n  // define n x m sized array filled with 0's\n  let matrix = [];\n\n  for(let i = 0; i <= arr1.length; i++) {\n      matrix[i] = [];\n      for(let j = 0; j <= arr2.length; j++) {\n          matrix[i][j] = 0;\n      }\n  }\n\n  // fill the matrix\n  for(let i = 1; i <= arr1.length; i++) {\n      for(let j = 1; j <= arr2.length; j++) {\n          if(arr1[i-1] === arr2[j-1]) { \n              matrix[i][j] = matrix[i-1][j-1] + 1;\n          }\n          else matrix[i][j] = Math.max(matrix[i-1][j], matrix[i][j-1])\n      }\n  }\n  let index = matrix[matrix.length-1][matrix[0].length-1];\n  console.log(index);\n  let lcs = [];\n  let a = arr1.length;\n  let b = arr2.length; \n  let longestLen = index;\n  while (a > 0 && b > 0){ \n      // If current character in X[] and Y are same, then \n      // current character is part of LCS \n      if (arr1[a-1] == arr2[b-1]) \n      { \n          lcs[index-1] = arr1[a-1]; // Put current character in result \n          a--; b--;     // reduce values of i, j and index \n\n          index--;\n      } \n\n      // If not same, then find the larger of two and \n      // go in the direction of larger value \n      else if (matrix[a-1][b] > matrix[a][b-1]) {\n          //lcs[index-1] = arr1[a-1];\n          a--;\n      } else {\n          //lcs[index-1] = arr2[b-1];\n          b--; \n      }\n      let currStr = lcs.join(\"\");\n      if(currStr.length == longestLen) break;\n  }\n  \n  let answer = lcs.join(\"\");\n  return answer;\n}\n\nexport default function shortestCommonSupersequence(set1, set2, updateLogs, updateOutput) {\n  // Let's first find the longest common subsequence of two sets.\n  const lcs = longestCommonSubsequence(set1, set2);\n  console.log(lcs);\n\n  // If LCS is empty then the shortest common supersequence would be just\n  // concatenation of two sequences.\n  if (lcs.length === 1 && lcs[0] === '') {\n    return set1.concat(set2);\n  }\n\n  // Now let's add elements of set1 and set2 in order before/inside/after the LCS.\n  let supersequence = [];\n\n  let setIndex1 = 0;\n  let setIndex2 = 0;\n  let lcsIndex = 0;\n  let setOnHold1 = false;\n  let setOnHold2 = false;\n\n  while (lcsIndex < lcs.length) {\n    console.log('abcd');\n    // Add elements of the first set to supersequence in correct order.\n    if (setIndex1 < set1.length) {\n      if (!setOnHold1 && set1[setIndex1] !== lcs[lcsIndex]) {\n        supersequence.push(set1[setIndex1]);\n        updateLogs(supersequence.join(\"\"));\n        setIndex1 += 1;\n      } else {\n        setOnHold1 = true;\n      }\n    }\n\n    // Add elements of the second set to supersequence in correct order.\n    if (setIndex2 < set2.length) {\n      if (!setOnHold2 && set2[setIndex2] !== lcs[lcsIndex]) {\n        supersequence.push(set2[setIndex2]);\n        updateLogs(supersequence.join(\"\"));\n        setIndex2 += 1;\n      } else {\n        setOnHold2 = true;\n      }\n    }\n\n    // Add LCS element to the supersequence in correct order.\n    if (setOnHold1 && setOnHold2) {\n      supersequence.push(lcs[lcsIndex]);\n      updateLogs(supersequence.join(\"\"));\n      lcsIndex += 1;\n      setIndex1 += 1;\n      setIndex2 += 1;\n      setOnHold1 = false;\n      setOnHold2 = false;\n    }\n  }\n\n  // Attach set1 leftovers.\n  if (setIndex1 < set1.length) {\n    supersequence = supersequence.concat(set1.slice(setIndex1));\n    updateLogs(supersequence.join(\"\"));\n  }\n\n  // Attach set2 leftovers.\n  if (setIndex2 < set2.length) {\n    supersequence = supersequence.concat(set2.slice(setIndex2));\n    updateLogs(supersequence.join(\"\"));\n  }\n  let answer = supersequence.join(\"\");\n  updateOutput(answer);\n  return answer;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport lcs from './algorithms/lcs';\nimport scs from './algorithms/scs';\nimport lis from './algorithms/lis';\nimport lvd from './algorithms/lvd';\nimport mcm from './algorithms/mcm';\nimport ks01 from './algorithms/ks01';\nimport partition from './algorithms/partition';\nimport rc from './algorithms/rc';\nimport coin from './algorithms/coin';\nimport wb from './algorithms/wb';\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`vertical-tabpanel-${index}`}\n      aria-labelledby={`vertical-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n  \nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `vertical-tab-${index}`,\n    'aria-controls': `vertical-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    display: 'flex',\n  },\n  tabs: {\n    borderRight: `1px solid ${theme.palette.divider}`,\n  },\n}));\n\nexport default function VerticalTabs({updateLogs, flushLogs, updateRun, updateOutput}) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  let [files, setFiles] = React.useState({});\n\n  function updateFiles(algo) {\n    for(let i = 0; i < 10; i++) {\n      fetch(`https://raw.githubusercontent.com/MahamShakir/AlgorithmsRunner-InputFiles/master/${algo}_input/${algo}-${i}.json`).then(res => {\n        return res.json();\n      }).then(data => {\n        data = data.data;\n        files[`${algo}-${i}.json`] = data;\n        files = {...files};\n        setFiles(files);\n      }).catch(err => console.log(err));\n    }\n  }\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n    //update choose hua wa algo\n    //get its input files\n    //if newValue == 0\n    files = [];\n    updateFiles(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        value={value}\n        onChange={handleChange}\n        aria-label=\"Vertical tabs example\"\n        className={classes.tabs}\n      >\n        <Tab label=\"Longest Common Subsequence\" {...a11yProps(0)} />\n        <Tab style={{flex:3}} label=\"Shortest Common Supersequence\" {...a11yProps(1)} />\n        <Tab label=\"Longest Increasing Subsequence\" {...a11yProps(2)} />\n        <Tab label=\"The Levenshtein Distance\" {...a11yProps(3)} />\n        <Tab label=\"Matrix Chain Multiplication\" {...a11yProps(4)} />\n        <Tab label=\"0–1 Knapsack Problem\" {...a11yProps(5)} />\n        <Tab label=\"Partition Problem\" {...a11yProps(6)} />\n        <Tab label=\"Rod Cutting\" {...a11yProps(7)} />\n        <Tab label=\"Coin Change Problem\" {...a11yProps(8)} />\n        <Tab label=\"Word Break Problem\" {...a11yProps(9)} />\n      </Tabs>\n\n      <TabPanel value={value} index={0}>\n        <List component=\"nav\" aria-label=\"select algorithm\">\n          {Object.keys(files).map(file => {\n            return (\n                <ListItem button onClick={() => {\n                  let str1 = files[file][0];\n                  let str2 = files[file][1];\n                  flushLogs();\n                  updateLogs(\"Selecting input...\");\n                  updateLogs(`String 1: ${str1}`);\n                  updateLogs(`String 2: ${str2}`);\n                  updateLogs(\"\");\n                  updateRun(() => lcs(str1, str2, updateLogs, updateOutput));\n                }}>\n                  <ListItemText primary={file} />\n                </ListItem>\n            );\n          })}\n        </List>\n      </TabPanel>\n\n      <TabPanel value={value} index={1}>\n        <List component=\"nav\" aria-label=\"select algorithm\">\n          {Object.keys(files).map(file => {\n            return (\n                <ListItem button onClick={() => {\n                  let str1 = files[file][0];\n                  let str2 = files[file][1];\n                  flushLogs();\n                  updateLogs(\"Selecting input...\");\n                  updateLogs(`String 1: ${str1}`);\n                  updateLogs(`String 2: ${str2}`);\n                  updateLogs(\"\");\n                  updateRun(() => scs(str1, str2, updateLogs, updateOutput))\n                }}>\n                  <ListItemText primary={file} />\n                </ListItem>\n            );\n          })}\n        </List>\n      </TabPanel>\n\n      <TabPanel value={value} index={2}>\n        <List component=\"nav\" aria-label=\"select algorithm\">\n          {Object.keys(files).map(file => {\n            return (\n                <ListItem button onClick={() => {\n                  let arr = files[file];\n                  flushLogs();\n                  updateLogs(\"Selecting input...\");\n                  updateLogs(`Array: ${arr.join(\",\")}`);\n                  updateLogs(\"\");\n                  updateRun(() => lis(arr, updateLogs, updateOutput))\n                }}>\n                  <ListItemText primary={file} />\n                </ListItem>\n            );\n          })}\n        </List>\n      </TabPanel>\n\n      <TabPanel value={value} index={3}>\n        <List component=\"nav\" aria-label=\"select algorithm\">\n          {Object.keys(files).map(file => {\n            return (\n                <ListItem button onClick={() => {\n                  let str1 = files[file][0];\n                  let str2 = files[file][1];\n                  flushLogs();\n                  updateLogs(\"Selecting input...\");\n                  updateLogs(`String 1: ${str1}`);\n                  updateLogs(`String 2: ${str2}`);\n                  updateLogs(\"\");\n                  updateRun(() => lvd(str1, str2, updateLogs, updateOutput))\n                }}>\n                  <ListItemText primary={file} />\n                </ListItem>\n            );\n          })}\n        </List>\n      </TabPanel>\n\n      <TabPanel value={value} index={4}>\n        <List component=\"nav\" aria-label=\"select algorithm\">\n          {Object.keys(files).map(file => {\n            return (\n                <ListItem button onClick={() => {\n                  let arr = files[file];\n                  flushLogs();\n                  updateLogs(\"Selecting input...\");\n                  updateLogs(`Array: ${arr.join(\",\")}`);\n                  updateLogs(\"\");\n                  updateRun(() => mcm(arr, updateLogs, updateOutput))\n                }}>\n                  <ListItemText primary={file} />\n                </ListItem>\n            );\n          })}\n\n        </List>\n      </TabPanel>\n\n      <TabPanel value={value} index={5}>\n        <List component=\"nav\" aria-label=\"select algorithm\">\n          {Object.keys(files).map(file => {\n            return (\n                <ListItem button onClick={() => {\n                  let {n, w, v, W} = files[file];\n                  flushLogs();\n                  updateLogs(\"Selecting input...\");\n                  updateLogs(`n: ${n}`);\n                  updateLogs(`W: ${W}`);\n                  updateLogs(`v: ${v.join(\",\")}`);\n                  updateLogs(`w: ${w.join(\",\")}`);\n                  updateLogs(\"\");\n                  updateRun(() => ks01(n, W, w, v, updateLogs, updateOutput))\n                }}>\n                  <ListItemText primary={file} />\n                </ListItem>\n            );\n          })}\n        </List>\n      </TabPanel>\n\n      <TabPanel value={value} index={6}>\n        <List component=\"nav\" aria-label=\"select algorithm\">\n          {Object.keys(files).map(file => {\n            return (\n                <ListItem button onClick={() => {\n                  let arr = files[file];\n                  flushLogs();\n                  updateLogs(\"Selecting input...\");\n                  updateLogs(`Array: ${arr.join(\",\")}`);\n                  updateLogs(\"\");\n                  updateRun(() => partition(arr, updateLogs, updateOutput))\n                }}>\n                  <ListItemText primary={file} />\n                </ListItem>\n            );\n          })}\n        </List>\n      </TabPanel>\n\n      <TabPanel value={value} index={7}>\n        <List component=\"nav\" aria-label=\"select algorithm\">\n          {Object.keys(files).map(file => {\n            return (\n                <ListItem button onClick={() => {\n                  let {l, p, L} = files[file];\n                  flushLogs();\n                  updateLogs(\"Selecting input...\");\n                  updateLogs(`Rod length: ${L}`);\n                  updateLogs(`prices: ${p.join(\",\")}`);\n                  updateLogs(`lengths: ${l.join(\",\")}`);\n                  updateLogs(\"\");\n                  updateRun(() => rc(p, L, updateLogs, updateOutput))\n                }}>\n                  <ListItemText primary={file} />\n                </ListItem>\n            );\n          })}\n        </List>\n      </TabPanel>\n\n      <TabPanel value={value} index={8}>\n        <List component=\"nav\" aria-label=\"select algorithm\">\n          {Object.keys(files).map(file => {\n            return (\n                <ListItem button onClick={() => {\n                  let {coins, money} = files[file];\n                  flushLogs();\n                  updateLogs(\"Selecting input...\");\n                  updateLogs(`Available Coins: ${coins}`);\n                  updateLogs(`Change Required: ${money}`);\n                  updateLogs(\"\");\n                  updateRun(() => coin(coins, money, updateLogs, updateOutput))\n                }}>\n                  <ListItemText primary={file} />\n                </ListItem>\n            );\n          })}\n        </List>\n      </TabPanel>\n\n      <TabPanel value={value} index={9}>\n        <List component=\"nav\" aria-label=\"select algorithm\">\n          {Object.keys(files).map(file => {\n            return (\n                <ListItem button onClick={() => {\n                  let {s, wordDict} = files[file];\n                  flushLogs();\n                  updateLogs(\"Selecting input...\");\n                  updateLogs(`Name: ${s}`);\n                  updateLogs(`Dictionary: ${wordDict}`);\n                  updateLogs(\"\");\n                  updateRun(() => wb(s, wordDict, updateLogs, updateOutput))\n                }}>\n                  <ListItemText primary={file} />\n                </ListItem>\n            );\n          })}\n        </List>\n      </TabPanel>\n    </div>\n  );\n}","export default function longestCommonSubsequence(s1, s2, updateLogs, updateOutput) {\n    // string to array\n    const arr1 = [...s1]\n    const arr2 = [...s2]\n  \n    // define n x m sized array filled with 0's\n    let matrix = [];\n\n    for(let i = 0; i <= arr1.length; i++) {\n        matrix[i] = [];\n        for(let j = 0; j <= arr2.length; j++) {\n            matrix[i][j] = 0;\n        }\n    }\n\n    console.log(matrix);\n    \n    // fill the matrix\n    for(let i = 1; i <= arr1.length; i++) {\n        for(let j = 1; j <= arr2.length; j++) {\n            if(arr1[i-1] === arr2[j-1]) { \n                matrix[i][j] = matrix[i-1][j-1] + 1;\n            }\n            else matrix[i][j] = Math.max(matrix[i-1][j], matrix[i][j-1])\n        }\n    }\n    let index = matrix[matrix.length-1][matrix[0].length-1];\n    console.log(index);\n    let lcs = [];\n    let a = arr1.length;\n    let b = arr2.length; \n    let longestLen = index;\n    updateLogs(`Longest length: ${index}`);\n    while (a > 0 && b > 0){ \n        // If current character in X[] and Y are same, then \n        // current character is part of LCS \n        if (arr1[a-1] == arr2[b-1]) \n        { \n            lcs[index-1] = arr1[a-1]; // Put current character in result \n            a--; b--;     // reduce values of i, j and index \n\n            index--;\n        } \n\n        // If not same, then find the larger of two and \n        // go in the direction of larger value \n        else if (matrix[a-1][b] > matrix[a][b-1]) {\n            //lcs[index-1] = arr1[a-1];\n            a--;\n        } else {\n            //lcs[index-1] = arr2[b-1];\n            b--; \n        }\n        let currStr = lcs.join(\"\");\n        updateLogs(currStr);\n        if(currStr.length == longestLen) break;\n    }\n    \n    let answer = lcs.join(\"\");\n    updateOutput(answer);\n    return answer;\n}","export default function longestIncreasingSubsequence(input, updateLogs, updateOutput) {\n    if (input.length === 0) {\n      return [];\n    }\n   \n    var lisLenPerIndex = [];\n    let max = { index: 0, length: 1 };\n   \n    for (var i = 0; i < input.length; i++) {\n      lisLenPerIndex[i] = 1;\n      for (var j = i - 1; j >= 0; j--) {\n        if (input[i] > input[j] && lisLenPerIndex[j] >= lisLenPerIndex[i]) {\n          var length = lisLenPerIndex[i] = lisLenPerIndex[j] + 1;\n          if (length > max.length) {\n            max = { index: i, length };\n          }\n        }\n      }\n    }\n   \n    var lis = [input[max.index]];\n    for (var i = max.index; i >= 0 && max.length !== 0; i--) {\n      if (input[max.index] > input[i] && lisLenPerIndex[i] === max.length - 1) {\n        lis.unshift(input[i]);\n        updateLogs(lis.join(\",\"));\n        max.length--;\n      }\n    }\n\n    updateOutput(lis.join(\", \"));\n   \n    return lis;\n  }","export default function levenshteinDistance (a, b, updateLogs, updateOutput) {\n    if(a.length == 0) return b.length; \n    if(b.length == 0) return a.length;\n\n    // swap to save some memory O(min(a,b)) instead of O(a)\n    if(a.length > b.length) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n    }\n\n    let row = [];\n    // init the row\n    for(let i = 0; i <= a.length; i++){\n        row[i] = i;\n    }\n\n    // fill in the rest\n    for(let i = 1; i <= b.length; i++){\n        let prev = i;\n        for(let j = 1; j <= a.length; j++){\n            let val;\n            if(b.charAt(i-1) == a.charAt(j-1)){\n                val = row[j-1]; // match\n            } else {\n                val = Math.min(row[j-1] + 1, // substitution\n                                prev + 1,     // insertion\n                                row[j] + 1);  // deletion\n            }\n            row[j - 1] = prev;\n            prev = val;\n        }\n        row[a.length] = prev;\n    }\n\n    for(let d = 0; d < row.length; d++) {\n        updateLogs(row[d]);\n    }\n\n    updateOutput(row[a.length]);\n\n    return row[a.length];\n}","export default function matrixChainMultiplication(dims, updateLogs, updateOutput){\n    let n = dims.length;\n\n    let c = [n+1];\n    for (var i = 0; i < n+1; i++){\n        c[i] = [];\n    }\n \n    for (var i = 1; i <= n; i++)\n        c[i][i] = 0;\n \n    for (var len = 2; len <= n; len++) // Subsequence lengths\n    {\n        for (var i = 1; i <= n - len + 1; i++)\n        {\n            let j = i + len - 1;\n            c[i][j] = Number.MAX_SAFE_INTEGER;\n \n            for (var k = i; j < n && k <= j - 1; k++)\n            {\n                let cost = c[i][k] + c[k + 1][j] +\n                            dims[i - 1]*dims[k]*dims[j];\n \n                if (cost < c[i][j])\n                    c[i][j] = cost;\n            }\n        }\n        updateLogs(`From 1..${len}:`);\n        updateLogs(c[1][len]);\n    }\n\n    updateOutput(c[1][n-1]);\n    return c[1][n - 1];\n}\n","export default function knapsack(n, W, weights, values, updateLogs, updateOutput) {\n\n    var finalResult;\n\n    weights = [null, ...weights];\n    values = [null, ...values];\n\n    let DP = [];\n    for(let i = 0; i <= n; i++) {\n        DP[i] = [];\n        for(let j = 0; j <= W; j++) {\n            DP[i][j] = 0;\n        }\n    }\n\n    for(let i = 0; i <= n; i++) {\n        for(let j = 0; j <= W; j++) {\n            if(i === 0 || j === 0) {\n                DP[i][j] = 0;\n            } else if(weights[i] > j) {\n                DP[i][j] = DP[i - 1][j];\n            } else {\n                var dontPutInKnapsack = DP[i - 1][j];\n                var putInSack = values[i] + DP[i - 1][j - weights[i]];\n                DP[i][j] = Math.max(dontPutInKnapsack, putInSack);\n            }\n        }\n    }\n      \n    let res = DP[n][W];\n    let w = W, sum = 0; \n    for (let i = n; i > 0 && res > 0; i--) { \n          \n        // either the result comes from the top \n        // (K[i][w]) or from (val[i] + K[i] \n        // [w-wt[i]]) as in Knapsack table. If \n        // it comes from the latter one/ it means  \n        // the item is included. \n        if (res == DP[i - 1][w])  \n            continue;         \n        else { \n            sum += values[i];\n            // This item is included. \n            updateLogs(`Selected Item: ${values[i]}, weight: ${weights[i]}, cumulative weight: ${sum}`); \n              \n            // Since this weight is included its  \n            // value is deducted \n            res = res - values[i]; \n            w = w - weights[i]; \n        } \n    } \n    \n    //return the final result\n    updateOutput(DP[n][W]);\n    return DP[n][W];\n}","export default function partition(num, updateLogs, updateOutput) {\n\n    console.log(\"aaa\");\n    const n = num.length;\n    // find the total sum\n    let sum = 0;\n    for (let i = 0; i < n; i++) sum += num[i];\n  \n    // if 'sum' is a an odd number, we can't have two subsets with same total\n    if (sum % 2 != 0) {\n        updateLogs(\"Odd sum found.\");\n        updateOutput(\"Not Possible\");\n        return false;\n    }\n  \n    // we are trying to find a subset of given numbers that has a total sum of ‘sum/2’.\n    sum /= 2;\n  \n    const dp = Array(n)\n      .fill(false)\n      .map(() => Array(sum + 1).fill(false));\n  \n    // populate the sum=0 column, as we can always have '0' sum without including any element\n    for (let i = 0; i < n; i++) dp[i][0] = true;\n  \n    // with only one number, we can form a subset only when the required sum is equal to its value\n    for (let s = 1; s <= sum; s++) {\n      dp[0][s] = num[0] == s;\n    }\n  \n    // process all subsets for all sums\n    for (let i = 1; i < n; i++) {\n      for (let s = 1; s <= sum; s++) {\n        // if we can get the sum 's' without the number at index 'i'\n        if (dp[i - 1][s]) {\n          dp[i][s] = dp[i - 1][s];\n        } else if (s >= num[i]) {\n          // else if we can find a subset to get the remaining sum\n          dp[i][s] = dp[i - 1][s - num[i]];\n        }\n      }\n      updateLogs(`For subarray length ${i}: ${dp[i][sum] ? \"Possible\" : \"Not Possible\"}`);\n    }\n\n    console.log(\"a\");\n  \n    // the bottom-right corner will have our answer.\n    updateOutput(dp[n-1][sum] ? \"Possible\": \"Not Possible\");\n    return dp[n - 1][sum];\n  }","export default function cut_rod(p,n, updateLogs, updateOutput){\n    let r = [];\n    let s = [];\n    r[0] = 0;\n    let i,j;\n    let maximum_revenue\n    for(j=1; j<=n; j++) {\n        maximum_revenue = -1;\n        for(i=1; i<=j; i++) {\n            if(p[i-1] + r[j-i] >= maximum_revenue) {\n                s[j] = i;\n                console.log(i, j);\n            }\n            \n            maximum_revenue = Math.max(maximum_revenue, p[i-1] + r[j-i]);\n        }\n        r[j] = maximum_revenue;\n    }\n\n    let _n = n;\n    while(_n > 0) {\n        updateLogs(`Selected piece: ${s[_n]}`);\n        _n -= s[_n];\n    }\n\n    updateOutput(r[n])\n    return r[n];\n}","export default function coin(S, n, updateLogs, updateOutput) { \n    let i, j, x, y; \n    const m = S.length;\n  \n    // We need n+1 rows as the table  \n    // is constructed in bottom up \n    // manner using the base case 0 \n    // value case (n = 0) \n    let table = []\n    for (i = 0; i<n+1; i++){\n        table[i] = []\n        for(j = 0; j<m; j++){\n            table[i][j] = 0\n        }\n    }\n      \n    // Fill the enteries for 0 \n    // value case (n = 0) \n    for (i = 0; i < m; i++) \n        table[0][i] = 1; \n  \n    // Fill rest of the table entries  \n    // in bottom up manner  \n    for (i = 1; i < n + 1; i++) \n    { \n        for (j = 0; j < m; j++) \n        { \n            // Count of solutions including S[j] \n            x = (i-S[j] >= 0) ? table[i - S[j]][j] : 0; \n  \n            // Count of solutions excluding S[j] \n            y = (j >= 1) ? table[i][j - 1] : 0; \n  \n            // total count \n            table[i][j] = x + y; \n        } \n    } \n\n    updateOutput(`Number of Possible ways: ${table[n][m - 1]}`)\n    return table[n][m - 1]; \n} \n","export default function wordBreak(s, wordDict, updateLogs, updateOutput){\n    if(!wordDict) return false;\n      \n  //Create a DP table of len(s) elements, and set true when if mark index i when s(i) is a word that can be formed from wordDict\n    let dp = new Array(s.length + 1);\n    dp[0] = true; //word of length 0 is always true;\n    let matches=[];\n    for(let i = 1; i <= s.length; i++) {\n      //i denotes that word length.\n      for(let j = 0; j<i; j++) {\n            if(dp[i]) break; //will not need to set dp[i] if it's already true\n        if(dp[j] && wordDict.indexOf(s.substring(i,j)) >= 0) {\n  //dp[j] = previous substring, s.substring(i,j) = remaining substring\n          dp[i] = true;\n          break;\n        }\n      }\n    }\n\n    updateOutput(`${Boolean(dp[s.length]) ? \"Possible to Break Word\" : \"Word Not Breakable\"} `)\n    return Boolean(dp[s.length]);\n  };\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\nexport default function BasicTable() {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Iteration#</TableCell>\n            <TableCell>Calories</TableCell>\n            <TableCell>Fat&nbsp;(g)</TableCell>\n            <TableCell>Carbs&nbsp;(g)</TableCell>\n            <TableCell>Protein&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell>{row.calories}</TableCell>\n              <TableCell>{row.fat}</TableCell>\n              <TableCell>{row.carbs}</TableCell>\n              <TableCell>{row.protein}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport VerticalTabs from './VerticalTabs';\nimport Table from './Table';\nimport PlayCircleFilledWhiteIcon from '@material-ui/icons/PlayCircleFilledWhite';\n\nfunction App() {\n  let [logs, setLogs] = useState([]);\n  let [onRun, setOnRun] = useState({\"fn\": () => alert(\"Please Select an Algorithm First\")});\n  let [output, setOutput] = useState();\n\n  function flushLogs() {\n    setLogs([]);\n    setOutput();\n  }\n\n  function updateLogs(item) {\n    setLogs(logs => [...logs, item]);\n  }\n\n  function updateRun(fn) {\n    setOnRun({fn});\n  }\n\n  function handleRun() {\n    onRun[\"fn\"]();\n  }\n\n  function updateOutput(output) {\n    setOutput(output);\n  }\n\n  return (\n    <div style={{height: \"100%\"}}>\n      <Grid container style={{height: \"100%\"}}>\n        <Grid item xs={8} style={{textAlign: \"center\", padding: 20}}>\n          <Typography variant=\"h2\">Algorithms Project</Typography>\n          <Button variant=\"contained\" color=\"secondary\" style={{float: \"right\"}} size=\"large\" startIcon={<PlayCircleFilledWhiteIcon />} onClick={handleRun}>\n            Run\n          </Button>\n          <div style={{clear: \"both\"}}></div>\n          <br/><Divider /><br/>\n          <VerticalTabs updateLogs={updateLogs} flushLogs={flushLogs} updateRun={updateRun} updateOutput={updateOutput} />\n          <br/><Divider /><br/>\n          <div style={{textAlign: \"left\"}}>\n            <Typography variant=\"h5\">Final Output:</Typography>\n            <Typography>{output}</Typography>\n          </div>\n        </Grid>\n        <Grid item xs={4} zeroMinWidth style={{padding: 20, backgroundColor: \"#333\", color: \"#fff\", whiteSpace: \"nowrap\", overflowX: \"scroll\", maxWidth: \"100\", maxHeight: \"100%\"}}>\n          <Typography variant=\"h5\">Logs..</Typography>\n          {logs.map(log => <Typography style={{fontFamily: \"Source Code Pro\"}}>{log}</Typography>)}\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}